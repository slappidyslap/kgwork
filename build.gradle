import org.springframework.boot.gradle.tasks.run.BootRun

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.9'
	id 'io.spring.dependency-management' version '1.1.2'
	id "co.uzzu.dotenv.gradle" version "2.0.0"
}

group = 'kg.musabaev'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.liquibase:liquibase-core'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.register('bootDevRun', BootRun) {
	mainClass = bootRun.mainClass
	classpath = bootRun.classpath
	systemProperty "spring.profiles.active", "dev"
	environment "DB_URL", env.DB_URL.value
	environment "DB_USERNAME", env.DB_USERNAME.value
	environment "DB_PASSWORD", env.DB_PASSWORD.value
}

tasks.withType(BootRun).configureEach {

}

tasks.named('test') {
	useJUnitPlatform()
}
